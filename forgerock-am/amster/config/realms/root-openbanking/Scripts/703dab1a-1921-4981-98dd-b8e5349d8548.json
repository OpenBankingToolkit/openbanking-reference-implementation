{
  "metadata" : {
    "realm" : "/openbanking",
    "amsterVersion" : "&{version}",
    "entityType" : "Scripts",
    "entityId" : "703dab1a-1921-4981-98dd-b8e5349d8548",
    "pathParams" : { }
  },
  "data" : {
    "_id" : "703dab1a-1921-4981-98dd-b8e5349d8548",
    "name" : "Device Id (Match) - Server Side",
    "description" : "Default global script for server side Device Id (Match) Authentication Module",
    "script" : "",
    "default" : true,
    "language" : "JAVASCRIPT",
    "context" : "AUTHENTICATION_SERVER_SIDE",
    "createdBy" : "null",
    "creationDate" : 0,
    "lastModifiedBy" : "null",
    "lastModifiedDate" : 0
  }
}